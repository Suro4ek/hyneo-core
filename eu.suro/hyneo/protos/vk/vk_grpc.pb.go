// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/vk.proto

package vk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VKClient is the client API for VK service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VKClient interface {
	NotifyServer(ctx context.Context, in *NotifyServerRequest, opts ...grpc.CallOption) (*Empty, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Empty, error)
	CheckCode(ctx context.Context, in *CheckCodeRequest, opts ...grpc.CallOption) (*Empty, error)
}

type vKClient struct {
	cc grpc.ClientConnInterface
}

func NewVKClient(cc grpc.ClientConnInterface) VKClient {
	return &vKClient{cc}
}

func (c *vKClient) NotifyServer(ctx context.Context, in *NotifyServerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.VK/NotifyServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vKClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.VK/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vKClient) CheckCode(ctx context.Context, in *CheckCodeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.VK/CheckCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VKServer is the server API for VK service.
// All implementations must embed UnimplementedVKServer
// for forward compatibility
type VKServer interface {
	NotifyServer(context.Context, *NotifyServerRequest) (*Empty, error)
	Join(context.Context, *JoinRequest) (*Empty, error)
	CheckCode(context.Context, *CheckCodeRequest) (*Empty, error)
	mustEmbedUnimplementedVKServer()
}

// UnimplementedVKServer must be embedded to have forward compatible implementations.
type UnimplementedVKServer struct {
}

func (UnimplementedVKServer) NotifyServer(context.Context, *NotifyServerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyServer not implemented")
}
func (UnimplementedVKServer) Join(context.Context, *JoinRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedVKServer) CheckCode(context.Context, *CheckCodeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCode not implemented")
}
func (UnimplementedVKServer) mustEmbedUnimplementedVKServer() {}

// UnsafeVKServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VKServer will
// result in compilation errors.
type UnsafeVKServer interface {
	mustEmbedUnimplementedVKServer()
}

func RegisterVKServer(s grpc.ServiceRegistrar, srv VKServer) {
	s.RegisterService(&VK_ServiceDesc, srv)
}

func _VK_NotifyServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VKServer).NotifyServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.VK/NotifyServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VKServer).NotifyServer(ctx, req.(*NotifyServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VK_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VKServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.VK/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VKServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VK_CheckCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VKServer).CheckCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.VK/CheckCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VKServer).CheckCode(ctx, req.(*CheckCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VK_ServiceDesc is the grpc.ServiceDesc for VK service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VK_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.VK",
	HandlerType: (*VKServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyServer",
			Handler:    _VK_NotifyServer_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _VK_Join_Handler,
		},
		{
			MethodName: "CheckCode",
			Handler:    _VK_CheckCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vk.proto",
}
